import os
import asyncio
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config import API_TOKEN
from db_con import init_db, save_to_db
from parse import get_average_price


bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()



keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="send_file")],
        [InlineKeyboardButton(text="üíµ –£–∑–Ω–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Å—É–º–º—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data="send_avg_price")]
    ])


@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)




@dp.callback_query()
async def handle_button_click(callback_query: types.CallbackQuery):
    if callback_query.data == "send_file":
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.")
    elif callback_query.data == "send_avg_price":
        try:
            text = get_average_price()
        except:
            text = "–û—à–∏–±–∫–∞. –ë–∞–∑–∞ –ø—É—Å—Ç–∞"
        await callback_query.message.answer(text, reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message()
async def handle_docs(message: types.Message):
    if message.document and message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        downloaded_file = await bot.download_file(file_path)
        with open("temp.xlsx", "wb") as new_file:
            new_file.write(downloaded_file.getvalue())
        df = pd.read_excel("temp.xlsx")
        text = df.to_string(index=False)
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        text = "\n".join(text.split("\n")[1:])
        await message.reply(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n{text}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–¥
        conn, cursor = init_db()
        for index, row in df.iterrows():
            save_to_db(cursor, row['title'], row['url'], row['xpath'])
        conn.close()
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove("temp.xlsx")
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=keyboard)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).", reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())